GNAT 4.6.4
Copyright 1992-2010, Free Software Foundation, Inc.

Compiling: /home/oleg/Data/Документы/FICT/6_семестр/ПП/lab1/lab1.adb (source file time stamp: 2016-03-03 00:28:07)

     1. with Ada.Text_IO, Ada.Integer_Text_IO, Ada.Synchronous_Task_Control,Data;
     2. use Ada.Text_IO, Ada.Integer_Text_IO, Ada.Synchronous_Task_Control;
     3.
     4.
     5. ------------------------------------------------------------------
     6. --                                                              --
     7. --              Паралельні і розподілені обчислення             --
     8. --                      Лабораторна робота №2.                  --
     9. --                                                              --
    10. --  Файл: lab1.ada                                              --
    11. --  Завдання:                                                   --
    12. --        А = B*(MO*MZ)+a*C 				                   	--
    13. --                               								--
    14. --        								                    	--
    15. --                                                              --
    16. --  Автор: Кахерський Олег, група IП-31                         --
    17. --  Дата: 02.03.2015                                            --
    18. --                                                              --
    19. ------------------------------------------------------------------
    20. procedure Lab1 is
    21. 	package DataN is new Data(3000);
    22. 	use DataN;
    23. 	MO,MZ: Matrix;
    24. 	B,C,a:Vector;
    25. 	alpha: Integer;
    26. 	h,n:integer;
    27. 	Skd1,S1,S2 : Suspension_Object;
    28.
    29. 	procedure Start is
    30. 		task T1;
    31. 		task T2;
    32.
    33. 		task body T1 is
    34. 			MO1, Buff: Matrix;
    35. 			B1, cHBuff: Vector;
    36. 			a1: integer;
    37. 		begin
    38. 			Put_Line("T1 started\n");
    39.
    40. 			--init data
    41. 			Input_Matrix(MO);
    42. 			Input_Matrix(MZ);
    43. 			Input_Vector(B);
    44. 			Input_Vector(C); 
    45. 			Input_Constant(alpha);
    46. 			Put_Line("T1 sent signal S1\n");
    47. 			Set_True(S1);
    48.
    49. 			Put_Line("T1 waits for Skd1\n");
    50. 			Suspend_Until_True(Skd1);
    51. 			Put_Line("T1 in crit section Skd1\n");
    52. 			B1  := B;
    53. 			a1  := alpha;
    54. 			MO1 := MO;
    55. 			Set_True(Skd1);
    56. 			Put_Line("T1 cancelled Skd1 section\n");
    57.
    58. 			Matrix_Matrix_Multiply(MO1,MZ,1,h,Buff); --Buff = MOh*MZ.
    59. 			--Output_Matrix(Buff);
    60. 		Vector_Matrix_Multiply(B1,Buff,1,h,A); -- A = Bh*Buff_h
    61. 		--Output_Vector(A);
    62. 			Constant_Vector_Multiply(a1,C,1,h,cHBuff); --a*Ch
    63. 			--Output_Vector(CHBuff);
    64. 			Vector_Vector_Add(CHBuff,A,1,h,A);
    65.
    66. 			Put_Line("T1 waiting for signal S2 from T2\n");
    67. 			Suspend_Until_True(S2);
    68. 			if h*2 <= 8 then
    69. 				Output_Vector(A);
    70. 			end if;
    71. 			Put_Line("T1 finished\n");			
    72. 		end T1;
    73.
    74. 		task body T2 is
    75. 			MO2, Buff: Matrix;
    76. 			B2,cHBuff : Vector;
    77. 			a2 : Integer;
    78. 		begin
    79. 			--Put_Line("T2 started\n");
    80. 			--Put_Line("T2 waiting for signal S1 from T1");
    81. 			Suspend_Until_True(S1);
    82. 			--Put_Line("T2 waits for Skd1\n");
    83. 			Suspend_Until_True(Skd1);
    84. 			--Put_Line("T2 in crit section Skd1\n");
    85. 			B2 := B;
    86. 			a2 := alpha;
    87. 			MO2:= MO;
    88. 			Set_True(Skd1);
    89. 			Put_Line("T2 cancelled Skd1 section\n");
    90.
    91. 			Matrix_Matrix_Multiply(MO2,MZ,H+1,n,Buff); --Buff = MOh*MZ.
    92. 			--Output_Matrix(Buff);
    93. 			Vector_Matrix_Multiply(B2,Buff,H+1,n,A); -- A = Bh*Buff_h
    94. 			--Output_Vector(A);
    95. 			Constant_Vector_Multiply(a2,C,H+1,n,cHBuff); --a*Ch
    96. 			--Output_Vector(CHBuff);
    97. 			Vector_Vector_Add(cHBuff,A,H+1,n,A);
    98. 			--Output_Vector(A);
    99.
   100. 			--Put_Line("T2 sent signal S2\n");
   101. 			Set_True(S2);
   102. 			--Put_Line("T2 finished\n");
   103. 		end T2;
   104. 	begin	
   105. 		null;
   106. 	end Start;
   107. begin
   108. 	n:=3000;
   109. 	h := n/2;
   110. 	Set_True(Skd1);
   111. 	Put(H);
   112. 	Start;
   113. end Lab1;

 113 lines: No errors
