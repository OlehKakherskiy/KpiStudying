GNAT 4.6.4
Copyright 1992-2010, Free Software Foundation, Inc.

Compiling: main.adb (source file time stamp: 2016-05-14 19:37:18)

     1. with Ada.Text_IO, Ada.Integer_Text_IO,Ada.Float_Text_IO, Ada.Synchronous_Task_Control, Ada.Real_Time, MatrixOperations;
     2. use Ada.Text_IO, Ada.Integer_Text_IO,Ada.Float_Text_IO, Ada.Synchronous_Task_Control, Ada.Real_Time;
     3.
     4.
     5. ------------------------------------------------------------------
     6. --                                                              --
     7. --          Програмування паралельних компьютерних систем       --
     8. --           Курсова робота. ПРГ1. Ада. Захищені модулі         --
     9. --                                                              --
    10. --  Файл: parallelCalcs.ada                                     --
    11. --  Завдання:                                                   --
    12. --        MA = MB*(MC+MO)*a + min(Z)*MK		                   	--
    13. --                               								--
    14. --        								                    	--
    15. --                                                              --
    16. --  Автор: Кахерський Олег, група IП-31                         --
    17. --  Дата: 12.03.2016                                            --
    18. --                                                              --
    19. ------------------------------------------------------------------
    20.
    21. procedure Main is
    22. 	n: Integer; 			--розмірність матриць та векторів
    23. 	p: Integer; 			--кількість задач
    24. 	h: Integer; 			--кількість рядків матриць та векторів на одну задачу
    25. 	StartTime: Time;		--початок обчислень
    26. 	DiffTime : Time_Span; 	--різниця між поточним часом(завершення обчислень) та початковим часом
    27. 	procedure Start is
    28. 		package MatrixOperationsN is new MatrixOperations(N);
    29. 		use MatrixOperationsN;
    30. 	    MA,MO,MC,MK: Matrix;
    31. 		Z: Vector;
    32. 		Task type ThreadTask(TaskNumber: Integer);
    33. 		protected ProtectedModule is
    34. 			entry waitInput; 					--бар'єр для синхронізації вводу даних
    35. 			entry waitMinZCalcFinish; 			--бар'єр для синхронізації обчислень min(Z)
    36. 			entry readyForOuptut; 				--очікування сигналу від T2-Tp задачею Т1
    37. 			function readAlpha return Integer; 	--захищене зчитування alpha
    38. 			function readMinZ return Integer; 	--захищене зчитування min(Z)
    39. 			function readMB return Matrix; 		--захищене зчитування readMB
    40. 			procedure inputFinishSignal;		--надсилання сигналу про завершення вводу даних
    41. 			procedure finishCalcsSignal;		--надсилання сигналу про завершення обчислень
    42. 			procedure finishMinZCalcSignal;		--надсилання сигналу про завершення обчислень min(z,zi)
    43. 			procedure setMinZ(b: Integer);		--встановлення значення minZ
    44. 			procedure initMB(Buff: Matrix);		--ініціалізація MB
    45. 			procedure initAlpha(const: Integer);--ініціалізація alpha
    46. 		private
    47. 			inputFlag: integer := 0;			--флаг для синхронізації вводу
    48. 			minZCalcFlag : integer := 0;		--флаг для синхронізації завершення обчислень min(Z)
    49. 			finCalcFlag : integer := 0;			--флаг для синхронізації завершення обчислень мат. виразу
    50. 			--спільні ресурси
    51. 			a, minZ: Integer;					
    52. 			MB : Matrix;
    53. 		end ProtectedModule;
    54.
    55. 		protected body ProtectedModule is
    56.
    57. 			--розблокування задач при inputFlag = 2 (завершення вводу даних в T1, Tp)
    58. 			entry waitInput when inputFlag = 2 is
    59. 			begin
    60. 				null;
    61. 			end waitInput;
    62.
    63. 			--розблокування задач при minZCalcFlag = p (завершення обчислення min(Z))
    64. 			entry waitMinZCalcFinish when minZCalcFlag = p is
    65. 			begin
    66. 				null;
    67. 			end waitMinZCalcFinish;
    68.
    69. 			--розблокування Т1 при завершенні обчислень в задачах T2..Tp
    70. 			entry readyForOuptut when finCalcFlag = p-1 is
    71. 			begin
    72. 				null;
    73. 			end readyForOuptut;
    74.
    75. 			function readAlpha return Integer is
    76. 			begin
    77. 				return a;
    78. 			end readAlpha;
    79.
    80. 			function readMinZ return Integer is
    81. 			begin
    82. 				return minZ;
    83. 			end readMinZ;
    84.
    85. 			function readMB return Matrix is
    86. 			begin
    87. 				return MB;
    88. 			end readMB;
    89.
    90. 			procedure inputFinishSignal is
    91. 			begin
    92. 				inputFlag := inputFlag + 1;
    93. 			end inputFinishSignal;
    94.
    95. 			procedure finishCalcsSignal is
    96. 			begin
    97. 				finCalcFlag := finCalcFlag + 1;
    98. 			end finishCalcsSignal;
    99.
   100. 			procedure finishMinZCalcSignal is
   101. 			begin
   102. 				minZCalcFlag := minZCalcFlag + 1;
   103. 			end finishMinZCalcSignal;
   104. 			
   105. 			procedure setMinZ(b: in Integer) is
   106. 			begin
   107. 				minZ := b;
   108. 			end setMinZ;
   109.
   110. 			procedure initAlpha(const: Integer) is
   111. 			begin
   112. 				a := const;
   113. 			end initAlpha;
   114.
   115. 			procedure initMB(Buff: Matrix) is
   116. 			begin
   117. 				MB := Buff;
   118. 			end initMB;
   119. 		end ProtectedModule;
   120.
   121. 	   	procedure compareWithMinZ(const:Integer) is
   122. 	   	begin
   123. 	   		Put_Line("Task is ready for calc minZ");
   124. 	   		New_line;
   125. 	   		if ProtectedModule.readMinZ >= const then
   126. 	   			Put_Line("Task is changing minZ");
   127. 	   			New_line;
   128. 	   			ProtectedModule.setMinZ(const);
   129. 	   		end if;
   130. 	   	end compareWithMinZ;
   131. 	   	
   132. 		procedure calcMatrixEquation(a,zi,startIndex,endIndex : Integer; MB: Matrix) is
   133. 			Buf1: Matrix;
   134. 		begin
   135. 			Matrix_Matrix_Add(MC,MO,startIndex,endIndex,1,Buf1); 			--Buf1_h = MOh+MCh
   136. 			Matrix_Matrix_Multiply(Buf1, MB, startIndex, endIndex, a, MA); 	--MA_h = Buf1_h*MB
   137. 			Matrix_Matrix_Add(MA,MK,startIndex,endIndex,zi,MA);
   138. 		end calcMatrixEquation;
   139.
   140. 		task body ThreadTask is
   141. 			tid: Integer := TaskNumber;
   142. 			ai, zi, startIndex, endIndex: Integer;
   143. 			MBi : Matrix;
   144. 		begin
   145. 			Put_Line("Task " & Integer'Image(tid) & " started");
   146. 			New_line;
   147. 			startIndex := h*(tid - 1) + 1;
   148. 			endIndex := h*tid;
   149. 			if tid = 1 then
   150. 				Put_Line("Task "& Integer'Image(tid) & " is initing data");
   151. 				New_line;
   152. 				Put_Line("Task "& Integer'Image(tid) & " inited MB");
   153. 				New_line;
   154. 				ProtectedModule.initMB(Input_Matrix);
   155. 				Put_Line("Task "& Integer'Image(tid) & " inited MO");
   156. 				New_line;
   157. 				MO := Input_Matrix;
   158. 				Put_Line("Task "& Integer'Image(tid) & " inited A");
   159. 				New_line;
   160. 				ProtectedModule.initAlpha(Input_Constant);
   161. 				--сигнал задачам о завершении ввода
   162. 				Put_Line("Task "& Integer'Image(tid) & " finished input and send Signal to All");
   163. 				New_line;
   164. 				ProtectedModule.inputFinishSignal;
   165. 			end if;
   166. 			if tid = p then
   167. 				endIndex := n;
   168. 				Put_Line("Task "& Integer'Image(tid) & " is initing data");
   169. 				New_line;
   170. 				Put_Line("Task "& Integer'Image(tid) & " inited MC");
   171. 				New_line;
   172. 				MC := Input_Matrix;
   173. 				Put_Line("Task "& Integer'Image(tid) & " inited MK");
   174. 				New_line;
   175. 				MK := Input_Matrix;
   176. 				Put_Line("Task "& Integer'Image(tid) & " inited Z");
   177. 				New_line;
   178. 				Z := Input_Vector;
   179. 				ProtectedModule.setMinZ(100000000);
   180. 				Put_Line("Task "& Integer'Image(tid) & " finished input and send Signal to All");
   181. 				New_line;
   182. 				ProtectedModule.inputFinishSignal;
   183. 			else
   184. 				Put_Line("Task "& Integer'Image(tid) & " waits for inputting data in T1, Tp");
   185. 				New_line;
   186. 			end if;
   187. 			ProtectedModule.waitInput;
   188. 			zi := Min(Z,startIndex, endIndex); 
   189. 			Put_Line("Task "& Integer'Image(tid) & " finished calcs minZ and sent signal of finishing");
   190. 			compareWithMinZ(zi);
   191. 			Put_Line("Task "& Integer'Image(tid) & " is copying shared resources");
   192. 			New_line;
   193. 			--копіювання СР
   194. 			ai := ProtectedModule.readAlpha;
   195. 			zi := ProtectedModule.readMinZ;
   196. 			MBi := ProtectedModule.readMB;
   197. 			Put_Line("Task "& Integer'Image(tid) & " is calculating matrix equation");
   198. 			New_line;
   199. 			calcMatrixEquation(ai,zi,startIndex,endIndex,MBi);
   200. 			if tid = 1 then
   201. 				Put_Line("Task "& Integer'Image(tid) & " is waiting for signal from all(finishing calc matrix equation)");
   202. 				New_line;
   203. 				ProtectedModule.readyForOuptut;
   204. 				DiffTime := Clock - StartTime;
   205. 				Put_Line("Calculating time = ");
   206. 				Put(Float(To_Duration(DiffTime)));
   207. 				New_line;
   208. 				if n <= 8 then
   209. 					Put_Line("Result:");
   210. 					New_line;
   211. 					Output_Matrix(MA);
   212. 				end if;
   213. 				Get(H);
   214. 			else
   215. 				Put_Line("Task "& Integer'Image(tid) & " is sending signal to T1 (finishing calc matrix equation)");
   216. 				New_line;
   217. 				ProtectedModule.finishCalcsSignal;
   218. 			end if;
   219. 			Put_Line("Task " & Integer'Image(tid) & " finished");
   220. 			New_line;
   221. 		end ThreadTask;
   222. 			type ThreadTaskPointer is access ThreadTask;
   223. 			type TaskArray is array (1 .. p) of ThreadTaskPointer;
   224. 			tArray: TaskArray;
   225. 		begin	
   226. 			for I in 1 .. p loop
   227. 				tArray(I) := new ThreadTask(I);
   228. 			end loop;
   229. 		end Start;
   230.
   231. begin
   232. 	Put("Program started");
   233. 	New_line;
   234. 	Put("Input N");
   235. 	New_line;
   236. 	Get(n);
   237. 	Put("Input P");
   238. 	New_line;
   239. 	Get(p);
   240. 	StartTime := Clock;
   241. 	h := n/p;
   242. 	Start;
   243. end Main;

 243 lines: No errors
