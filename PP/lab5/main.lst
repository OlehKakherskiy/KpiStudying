GNAT 4.6.4
Copyright 1992-2010, Free Software Foundation, Inc.

Compiling: main.adb (source file time stamp: 2016-04-09 18:17:44)

     1. with Ada.Text_IO, Ada.Integer_Text_IO,Ada.Float_Text_IO, Ada.Synchronous_Task_Control, Ada.Real_Time, MatrixOperations;
     2. use Ada.Text_IO, Ada.Integer_Text_IO,Ada.Float_Text_IO, Ada.Synchronous_Task_Control, Ada.Real_Time;
     3.
     4.
     5. ------------------------------------------------------------------
     6. --                                                              --
     7. --          Програмування паралельних компьютерних систем       --
     8. --          Лаб 5. Ада. Захищені модулі					        --
     9. --                                                              --
    10. --  Файл: main.abd			                                    --
    11. --  Завдання:                                                   --
    12. --                               								--
    13. --        								                    	--
    14. --                                                              --
    15. --  Автор: Кахерський Олег, група IП-31                         --
    16. --  Дата: 07.04.2016                                            --
    17. --                                                              --
    18. ------------------------------------------------------------------
    19.
    20. procedure Main is
    21. 	n: Integer; 			--розмірність матриць та векторів
    22. 	p: Integer; 			--кількість задач
    23. 	h: Integer; 			--кількість рядків матриць та векторів на одну задачу
    24. 	procedure Start is
    25. 		package MatrixOperationsN is new MatrixOperations(N);
    26. 		use MatrixOperationsN;
    27. 	   	MO : Matrix;
    28. 	   	A, B, C, Z : Vector;
    29.
    30. 		task type ThreadTask(tID: Integer);
    31. 		protected ProtectedModule is
    32. 			entry waitInput; 					--бар'єр для синхронізації вводу даних
    33. 			entry waitScalarMultFin;			--очікування підсумовування скалярних добутків підвекторів
    34. 			entry readyForOuptut; 				--очікування сигналу від T2-Tp задачею Т1
    35.
    36. 			function readE return Integer;
    37. 			function readD return Integer;
    38. 			function read_a return Integer;
    39. 			function readR return Vector;
    40. 			function readMK return Matrix;
    41.
    42. 			procedure inputFinishSignal;		--надсилання сигналу про завершення вводу даних
    43. 			procedure finishCalcsSignal;		--надсилання сигналу про завершення обчислень
    44. 			procedure finishScalarMultCalcs;    --надсилання сигналу про завершення обчислення скалярного добутку векторів
    45. 			procedure addToScalarMultResult(b: Integer);
    46. 			procedure init_e(b: Integer);
    47. 			procedure init_d(b: Integer);
    48. 			procedure initR(Buff: Vector);
    49. 			procedure initMK(Buff: Matrix);
    50. 			procedure outputLine(message: String);
    51. 		private
    52. 			inputFlag : Integer := 0;
    53. 			finishFlag : Integer := 0;
    54. 			scalarResultFlag : Integer := 0;
    55.
    56. 			e, x, d : Integer;
    57. 			R : Vector;
    58. 			MK : Matrix;
    59. 		end ProtectedModule;
    60.
    61. 		protected body ProtectedModule is
    62.
    63. 			--розблокування задач при inputFlag = 4 (завершення вводу даних в T1..4)
    64. 			entry waitInput when inputFlag = 4 is
    65. 			begin
    66. 				null;
    67. 			end waitInput;
    68.
    69. 			entry waitScalarMultFin when scalarResultFlag = p is
    70. 			begin
    71. 				null;
    72. 			end waitScalarMultFin;
    73.
    74. 			--розблокування Т2 при завершенні обчислень в задачах T1..Tp
    75. 			entry readyForOuptut when finishFlag = p-1 is
    76. 			begin
    77. 				null;
    78. 			end readyForOuptut;
    79.
    80. 			function readE return Integer is
    81. 			begin
    82. 				return e;
    83. 			end readE;
    84.
    85. 			function readD return Integer is
    86. 			begin
    87. 				return d;
    88. 			end readD;
    89.
    90. 			function read_A return Integer is
    91. 			begin
    92. 				return x;
    93. 			end read_A;
    94.
    95. 			function readR return Vector is
    96. 			begin
    97. 				return R;
    98. 			end readR;
    99.
   100. 			function readMK return Matrix is
   101. 			begin
   102. 				return MK;
   103. 			end readMK;
   104.
   105. 			procedure inputFinishSignal is   	--надсилання сигналу про завершення вводу даних
   106. 			begin
   107. 				inputFlag := inputFlag + 1;
   108. 			end inputFinishSignal;
   109.
   110. 			procedure finishCalcsSignal is		--надсилання сигналу про завершення обчислень
   111. 			begin
   112. 				finishFlag := finishFlag + 1;
   113. 			end finishCalcsSignal;
   114.
   115. 			procedure finishScalarMultCalcs is
   116. 			begin
   117. 				scalarResultFlag := scalarResultFlag + 1;
   118. 			end finishScalarMultCalcs;
   119.
   120. 			procedure addToScalarMultResult(b: Integer) is
   121. 			begin
   122. 				x := x + b;
   123. 			end addToScalarMultResult;
   124.
   125. 			procedure init_e(b: Integer) is
   126. 			begin
   127. 				e := b;
   128. 			end init_e;
   129.
   130. 			procedure init_d(b: Integer) is
   131. 			begin
   132. 				d := b;
   133. 			end init_d;
   134.
   135. 			procedure initR(Buff: Vector) is
   136. 			begin
   137. 				R := Buff;
   138. 			end initR;
   139.
   140. 			procedure initMK(Buff: Matrix) is
   141. 			begin
   142. 				MK := Buff;
   143. 			end initMK;
   144.
   145. 			procedure outputLine(message: String) is
   146. 			begin
   147. 				Put_Line(message);
   148. 				New_line;
   149. 			end outputLine;
   150. 		end ProtectedModule;
   151.
   152. 		procedure calcMatrixEquation(ai,ei,di,startIndex,endIndex : Integer; Ri:Vector; MKi: Matrix) is
   153. 			Buf1: Matrix;
   154. 			Vect_Buf: Vector;
   155. 		begin
   156. 			Matrix_Matrix_Multiply(MO,MKi,startIndex,endIndex,Buf1); 			--Buf1_h = MOh+MK
   157. 			Vector_Matrix_Multiply(Ri,Buf1,Vect_Buf,startIndex,endIndex);
   158. 			Vector_Vector_Add(Z,Vect_Buf,A,ei,ai*di,startIndex,endIndex);
   159. 		end calcMatrixEquation;
   160.
   161. 		task body ThreadTask is
   162. 			i: Integer := tID;
   163. 			xi, ei, di, startIndex, endIndex: Integer;
   164. 			MKi : Matrix;
   165. 			Ri: Vector;
   166. 		begin
   167. 			ProtectedModule.outputLine("Task " & Integer'Image(i) & " started");
   168. 			startIndex := h*(i - 1) + 1;
   169. 			if i = p then
   170. 				endIndex := N;
   171. 			else 
   172. 				endIndex := h*i;
   173. 			end if;
   174.
   175. 			if i = 1 then
   176. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " is inputting data");
   177. 				
   178. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inputted MK");
   179. 				ProtectedModule.initMK(Input_Matrix);
   180.
   181. 				--сигнал задачам о завершении ввода
   182. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " finished input and send Signal to All");
   183. 				ProtectedModule.inputFinishSignal;
   184.
   185. 			elsif i = 2 then
   186. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " is initing data");
   187. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inited Z");
   188. 				Z := Input_Vector;
   189.
   190. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inited e");
   191. 				ProtectedModule.init_e(Input_Constant);
   192.
   193. 				--сигнал задачам о завершении ввода
   194. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " finished input and send Signal to All");
   195. 				ProtectedModule.inputFinishSignal;
   196.
   197. 			elsif i = 3 then
   198. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inited B");
   199. 				B := Input_Vector;
   200. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inited R");
   201. 				ProtectedModule.initR(Input_Vector);
   202.
   203. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inited d");
   204. 				ProtectedModule.init_d(Input_Constant);
   205.
   206. 				--сигнал задачам о завершении ввода
   207. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " finished input and send Signal to All");
   208. 				ProtectedModule.inputFinishSignal;
   209.
   210. 			elsif i = 4 then
   211.
   212. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inited C");
   213. 				C := Input_Vector;
   214.
   215. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " inited MO");
   216. 				MO := Input_Matrix;
   217.
   218. 				--сигнал задачам о завершении ввода
   219. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " finished input and send Signal to All");
   220. 				ProtectedModule.inputFinishSignal;
   221.
   222. 			else
   223. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " waits for inputting data in T1, Tp");
   224. 			end if;
   225.
   226. 			--синхронізація по вводу
   227. 			ProtectedModule.waitInput; 
   228.
   229. 			--обчислення скалярного добутку
   230. 			ProtectedModule.addToScalarMultResult(Scalar_Multiply(B, C, startIndex, endIndex));
   231.
   232. 			--синхронізація по завершенню обчислення скалярного добутку
   233. 			ProtectedModule.finishScalarMultCalcs;
   234. 			ProtectedModule.waitScalarMultFin;
   235.
   236. 			--копіювання СР
   237. 			ProtectedModule.outputLine("Task "& Integer'Image(i) & " is copying shared resources");
   238. 			ei := ProtectedModule.readE;
   239. 			di := ProtectedModule.readD;
   240. 			Ri := ProtectedModule.readR;
   241. 			xi := ProtectedModule.read_a;
   242. 			MKi := ProtectedModule.readMK;
   243.
   244. 			ProtectedModule.outputLine("Task "& Integer'Image(i) & " is calculating matrix equation");
   245. 			
   246. 			calcMatrixEquation(xi, ei, di, startIndex, endIndex, Ri, MKi);
   247.
   248. 			if i = 2 then
   249. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " is waiting for signal from all(finishing calc matrix equation)");
   250. 				ProtectedModule.readyForOuptut;
   251. 				if n <= 8 then
   252. 					Put_Line("Result:");
   253. 					New_line;
   254. 					Output_Vector(A);
   255. 				end if;
   256. 				Get(H);
   257. 			else
   258. 				ProtectedModule.outputLine("Task "& Integer'Image(i) & " is sending signal to T2 (finishing calc matrix equation)");
   259. 				ProtectedModule.finishCalcsSignal;
   260. 			end if;
   261. 			Put_Line("Task " & Integer'Image(i) & " finished");
   262. 			New_line;
   263. 		end ThreadTask;
   264.
   265. 			type ThreadTaskPointer is access ThreadTask;
   266. 			type TaskArray is array (1 .. p) of ThreadTaskPointer;
   267. 			tArray: TaskArray;
   268. 		begin	
   269. 			for I in 1 .. p loop
   270. 				tArray(I) := new ThreadTask(I);
   271. 			end loop;
   272. 		end Start;
   273.
   274. begin
   275. 	Put("Program started");
   276. 	New_line;
   277. 	Put("Input N");
   278. 	New_line;
   279. 	Get(n);
   280. 	Put("Input P");
   281. 	New_line;
   282. 	Get(p);
   283. 	h := n/p;
   284. 	Start;
   285. end Main;

 285 lines: No errors
